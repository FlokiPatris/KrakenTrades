name: "üõ°Ô∏è Enhanced Security Scan"

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

env:
  IMAGE_NAME: krakentrades:ci
  PYTHON_VERSION: "3.11"
  DEP_FILE: requirements.txt
  DOCKERFILE_PATH: Dockerfile
  SARIF_DIR: sarif-reports
  GITLEAKS_BIN: /usr/local/bin/gitleaks

jobs:
  static-and-secrets:
    name: Static Analysis & Secrets
    runs-on: ubuntu-latest

    steps:
      - name: üßæ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üìÇ Prepare SARIF Directory
        run: |
          mkdir -p "$SARIF_DIR"
          chmod 700 "$SARIF_DIR"

      - name: ‚úÖ Validate Required Env Vars
        run: |
          required_vars=(IMAGE_NAME PYTHON_VERSION DEP_FILE DOCKERFILE_PATH SARIF_DIR)
          for var in "${required_vars[@]}"; do
            [ -n "${!var}" ] || { echo "::error::$var is not set"; exit 1; }
          done

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: üì¶ Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install "poetry==1.8.3"
          poetry --version

      - name: üì§ Export Dependencies
        run: poetry export -f requirements.txt --output "$DEP_FILE" --without-hashes

      - name: üßπ Lint Python Code
        run: |
          pip install black flake8
          black --check .
          flake8 .

      - name: üîê Install Security Tools
        run: |
          pip install bandit pip-audit
          echo "‚¨áÔ∏è Fetching latest Gitleaks release..."
          GITLEAKS_URL=$(curl -s https://api.github.com/repos/gitleaks/gitleaks/releases/latest \
            | grep browser_download_url \
            | grep linux-amd64 \
            | cut -d '"' -f 4)
          echo "Downloading from: $GITLEAKS_URL"
          curl -fsSL "$GITLEAKS_URL" -o /tmp/gitleaks
          chmod +x /tmp/gitleaks
          sudo mv /tmp/gitleaks "$GITLEAKS_BIN"
          file "$GITLEAKS_BIN" | grep -q ELF || { echo "::error::Downloaded gitleaks is not a binary"; exit 1; }
          "$GITLEAKS_BIN" version

      - name: üîç Run Gitleaks (Secrets Scan)
        run: |
          "$GITLEAKS_BIN" detect \
            --source=. \
            --no-banner \
            --report-format sarif \
            --report-path "$SARIF_DIR/gitleaks.sarif"

      - name: üì§ Upload Gitleaks SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "$SARIF_DIR/gitleaks.sarif"

      - name: üß™ Run pip-audit (Dependency CVEs)
        run: |
          pip-audit --requirement "$DEP_FILE" \
            --format sarif \
            --output "$SARIF_DIR/pip-audit.sarif" \
            --strict || exit 1

      - name: üì§ Upload pip-audit SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "$SARIF_DIR/pip-audit.sarif"

      - name: üß† Run Bandit (Static Python Analysis)
        run: |
          bandit -r . -q -f sarif -o "$SARIF_DIR/bandit.sarif" || exit 1

      - name: üì§ Upload Bandit SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "$SARIF_DIR/bandit.sarif"
