# .github/workflows/scan.yml
# üîê AppSec ‚Äî Security, Secrets & Shell Script Scan (DRY, Makefile-driven)
# - Single source of truth: defers to Makefile targets for all scans
# - CI-only responsibilities: SARIF upload, gating, artifact hardening
# - No magic constants: all tunables centralized in env
# - Public repo safe: minimal permissions, no secrets echoed, hardened artifacts

name: "üîê AppSec ‚Äî Security, Secrets & Shell Script Scan"

on:
  push:
    branches: ["**"]
    paths:
      - "**.sh"
      - ".ci/bin/**"
      - "Makefile"
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

concurrency:
  group: appsec-scan-${{ github.ref }}
  cancel-in-progress: true

env:
  # Runtime/tooling
  PYTHON_VERSION: "3.11"
  SARIF_DIR: "sarif-reports"
  
  # Upload SARIF only for push and for PRs from same repository (avoid leak from forks)
  UPLOAD_SARIF: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}

jobs:
  security:
    name: Run Makefile AppSec suite
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        shell: bash

    steps:
      - name: üì• Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: üß∞ Install minimal system dependencies
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            make ca-certificates git curl jq
          sudo rm -rf /var/lib/apt/lists/*

      # Core step: delegate all scanning to the Makefile to avoid YAML drift.
      - name: üîê Run AppSec suite via Makefile
        run: make appsec

      # Harden SARIF files before uploading or artifacting
      - name: üßπ Harden SARIF artifacts (permissions)
        if: always()
        env:
          SARIF_DIR: ${{ env.SARIF_DIR }}
          UPLOAD_SARIF: ${{ env.UPLOAD_SARIF }}
        run: |
          set -euo pipefail
          if [[ -d "${SARIF_DIR}" ]]; then
            # Restrictive perms (no world-readable)
            find "${SARIF_DIR}" -type f -name "*.sarif" -exec chmod 600 {} \; || true
            find "${SARIF_DIR}" -type d -exec chmod 700 {} \; || true
          fi
          echo "Audit: SARIF permissions set, uploads gated by UPLOAD_SARIF=${UPLOAD_SARIF}."

      # Bundle SARIF as a short-lived artifact to decouple upload (enables DRY matrix in a separate job)
      - name: üì¶ Upload SARIF bundle (for post-processing)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sarif-bundle
          path: ${{ env.SARIF_DIR }}/*.sarif
          if-no-files-found: ignore
          retention-days: 2

  sarif-upload:
    name: Upload SARIF to Security tab
    needs: [security]
    runs-on: ubuntu-latest
    if: ${{ needs.security.result != 'cancelled' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)) }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - file: trivy.sarif
            category: sec-trivy
          - file: gitleaks.sarif
            category: secrets-gitleaks
          - file: pip-audit.sarif
            category: deps-pip-audit
          - file: shellcheck.sarif
            category: lint-shellcheck
          - file: bandit.sarif
            category: code-bandit
    env:
      SARIF_DIR: "sarif-reports"

    steps:
      - name: üì• Download SARIF bundle
        uses: actions/download-artifact@v4
        with:
          name: sarif-bundle
          path: ${{ env.SARIF_DIR }}

      # Upload only if the specific SARIF exists (avoids errors if a tool skipped or produced nothing)
      - name: ‚¨ÜÔ∏è Upload ${{ matrix.category }} SARIF
        if: ${{ always() && hashFiles(format('{0}/{1}', env.SARIF_DIR, matrix.file)) != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_DIR }}/${{ matrix.file }}
          category: ${{ matrix.category }}
          wait-for-processing: true
