name: "üõ°Ô∏è Security & Secrets Scan"

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

concurrency:
  group: security-secrets-scan-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  SARIF_DIR: "sarif-reports"
  BANDIT_SEVERITY: "medium"
  GITLEAKS_IMAGE: "zricethezav/gitleaks"
  GITLEAKS_IMAGE_TAG: "8.18.2"
  GITLEAKS_FALLBACK_TAG: "latest"

jobs:
  security:
    name: Static analysis, dependencies, and secrets
    runs-on: ubuntu-latest
    timeout-minutes: 20

    defaults:
      run:
        shell: /usr/bin/bash --noprofile --norc -euo pipefail {0}

    steps:
      - name: üßæ Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîí Validate environment and prepare artifacts dir
        run: |
          required_vars=(PYTHON_VERSION SARIF_DIR BANDIT_SEVERITY GITLEAKS_IMAGE GITLEAKS_IMAGE_TAG GITLEAKS_FALLBACK_TAG)
          for key in "${required_vars[@]}"; do
            if [[ -z "${!key:-}" ]]; then
              echo "::error title=Missing environment variable::${key} is not set"
              exit 1
            fi
          done
          install -d -m 750 "${SARIF_DIR}"

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: üì¶ Prepare dependency manifest (Poetry or requirements)
        id: deps
        run: |
          if [[ -f poetry.lock ]]; then
            python -m pip install --upgrade pip
            pip install "poetry==1.8.3"
            poetry export -f requirements.txt --output requirements.txt --without-hashes
            echo "requirements=requirements.txt" >> "$GITHUB_OUTPUT"
          elif [[ -f requirements.txt ]]; then
            echo "requirements=requirements.txt" >> "$GITHUB_OUTPUT"
          else
            echo "::warning::No poetry.lock or requirements.txt found; pip-audit will attempt environment resolution."
            echo "requirements=" >> "$GITHUB_OUTPUT"
          fi

      - name: üßπ Install and run linters
        run: |
          python -m pip install --upgrade pip
          pip install "black==24.8.0" "flake8==7.1.0"
          black --check .
          flake8 .

      - name: üîê Gitleaks secrets scan (Docker, SARIF)
        continue-on-error: true
        env:
          IMAGE: ${{ env.GITLEAKS_IMAGE }}
          TAG: ${{ env.GITLEAKS_IMAGE_TAG }}
          FALLBACK_TAG: ${{ env.GITLEAKS_FALLBACK_TAG }}
        run: |
          set -x
          resolved_tag="$TAG"
          if ! docker pull "${IMAGE}:${resolved_tag}"; then
            echo "::warning title=Gitleaks image tag missing::Falling back to ${FALLBACK_TAG}"
            resolved_tag="$FALLBACK_TAG"
            docker pull "${IMAGE}:${resolved_tag}" || { echo "::error::Failed to pull gitleaks image"; exit 0; }
          fi

          cfg_args=()
          if [[ -f ".gitleaks.toml" ]]; then
            cfg_args+=(--config "/repo/.gitleaks.toml")
          fi

          uid_gid="$(id -u):$(id -g)"
          docker run --rm \
            --user "${uid_gid}" \
            --read-only \
            --cap-drop=ALL \
            --network none \
            -v "$PWD:/repo:ro" \
            -v "$PWD/${SARIF_DIR}:/out:rw" \
            -w /repo \
            "${IMAGE}:${resolved_tag}" detect \
              --no-banner \
              --redact \
              --source /repo \
              --report-format sarif \
              --report-path "/out/gitleaks.sarif" \
              "${cfg_args[@]}" || true

          # Guarantee SARIF exists so upload doesn't fail
          touch "${SARIF_DIR}/gitleaks.sarif"

      - name: üì§ Upload Gitleaks SARIF
        if: ${{ always() }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_DIR }}/gitleaks.sarif

      - name: üß™ Dependency CVE audit (pip-audit SARIF)
        run: |
          python -m pip install --upgrade pip
          pip install "pip-audit==2.9.0"
          if [[ -n "${{ steps.deps.outputs.requirements }}" ]]; then
            pip-audit --requirement "${{ steps.deps.outputs.requirements }}" \
              --format sarif --output "${SARIF_DIR}/pip-audit.sarif" --strict
          else
            pip-audit --format sarif --output "${SARIF_DIR}/pip-audit.sarif" --strict
          fi

      - name: üì§ Upload pip-audit SARIF
        if: ${{ always() }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_DIR }}/pip-audit.sarif

      - name: üß† Bandit static analysis (SARIF)
        run: |
          python -m pip install --upgrade pip
          pip install "bandit[toml]==1.8.6"
          bandit -r . -q \
            --severity-level "${BANDIT_SEVERITY}" \
            -f sarif -o "${SARIF_DIR}/bandit.sarif"

      - name: üì§ Upload Bandit SARIF
        if: ${{ always() }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_DIR }}/bandit.sarif

      - name: üßΩ Secure cleanup
        if: ${{ always() }}
        run: |
          find . -maxdepth 2 -type f \( -name "*.tar" -o -name "*.tar.gz" -o -name "*.zip" \) -print0 | xargs -0 -r rm -f
          chmod -R go-rwx "${SARIF_DIR}" || true
