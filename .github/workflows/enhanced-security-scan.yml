# .github/workflows/scan.yml
# üîê AppSec ‚Äî Security, Secrets & Shell Script Scan (DRY, Makefile-driven)
# - Single source of truth: defers to Makefile targets for all scans
# - CI-only responsibilities: SARIF upload, gating, artifact hardening
# - No magic constants: all tunables centralized in env
# - Public repo safe: minimal permissions, no secrets echoed, hardened artifacts

name: "üîê AppSec ‚Äî Security, Secrets & Shell Script Scan"

on:
  pull_request:
    branches: ["**"]
    paths:
      - "**.sh"
      - ".ci/bin/**"
      - "Makefile"
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

concurrency:
  group: appsec-scan-${{ github.ref }}
  cancel-in-progress: true

env:
  # Runtime/tooling
  PYTHON_VERSION: "3.11"
  SARIF_DIR: "sarif-reports"

  # Pinned tool versions (reproducible)
  PIP_AUDIT_VERSION: "2.9.0"
  BANDIT_VERSION: "1.8.6"
  TRIVY_VERSION: "0.51.4"
  GITLEAKS_IMAGE: "zricethezav/gitleaks"
  GITLEAKS_IMAGE_TAG: "8.18.2"
  GITLEAKS_FALLBACK_TAG: "latest"

  # Trivy behavior: do not fail the job directly (we gate explicitly later)
  TRIVY_EXIT_CODE: "0"

  # Upload SARIF only for push and for PRs from same repository (avoid leak from forks)
  UPLOAD_SARIF: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}

jobs:
  security:
    name: Run Makefile AppSec suite
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        shell: bash

    steps:
      - name: üì• Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: üß∞ Install minimal system dependencies
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            make ca-certificates git curl jq
          sudo rm -rf /var/lib/apt/lists/*

      - name: üîé Validate required secrets (non-fatal if helper missing)
        run: |
          set -euo pipefail
          if [[ -x ".ci/bin/common.sh" ]]; then
            bash .ci/bin/common.sh validate_required_secrets
          else
            echo "Note: .ci/bin/common.sh not found; skipping required secrets validation."
          fi

      - name: üìÇ Prepare SARIF directory
        env:
          SARIF_DIR: ${{ env.SARIF_DIR }}
        run: make ensure-dirs

      # Core step: delegate all scanning to the Makefile to avoid YAML drift.
      - name: üîê Run AppSec suite via Makefile
        env:
          SARIF_DIR: ${{ env.SARIF_DIR }}
          PIP_AUDIT_VERSION: ${{ env.PIP_AUDIT_VERSION }}
          BANDIT_VERSION: ${{ env.BANDIT_VERSION }}
          GITLEAKS_IMAGE: ${{ env.GITLEAKS_IMAGE }}
          GITLEAKS_IMAGE_TAG: ${{ env.GITLEAKS_IMAGE_TAG }}
          GITLEAKS_FALLBACK_TAG: ${{ env.GITLEAKS_FALLBACK_TAG }}
          TRIVY_VERSION: ${{ env.TRIVY_VERSION }}
          TRIVY_EXIT_CODE: ${{ env.TRIVY_EXIT_CODE }}
        run: |
          set -euo pipefail
          # The Makefiles `appsec` target runs: shellcheck, bandit, pip-audit, gitleaks, trivy
          # Each .ci/bin/* script must write any gating statuses to $GITHUB_ENV (e.g., GITLEAKS_STATUS, AUDIT_STATUS).
          make appsec

      # Harden SARIF files before uploading or artifacting
      - name: üßπ Harden SARIF artifacts (permissions)
        if: always()
        env:
          SARIF_DIR: ${{ env.SARIF_DIR }}
          UPLOAD_SARIF: ${{ env.UPLOAD_SARIF }}
        run: |
          set -euo pipefail
          if [[ -d "${SARIF_DIR}" ]]; then
            # Restrictive perms (no world-readable)
            find "${SARIF_DIR}" -type f -name "*.sarif" -exec chmod 600 {} \; || true
            find "${SARIF_DIR}" -type d -exec chmod 700 {} \; || true
          fi
          echo "Audit: SARIF permissions set, uploads gated by UPLOAD_SARIF=${UPLOAD_SARIF}."

      # Bundle SARIF as a short-lived artifact to decouple upload (enables DRY matrix in a separate job)
      - name: üì¶ Upload SARIF bundle (for post-processing)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sarif-bundle
          path: ${{ env.SARIF_DIR }}/*.sarif
          if-no-files-found: ignore
          retention-days: 2

      # Explicit gating: fail the job based on tool-reported statuses written by scripts to $GITHUB_ENV.
      # These environment variables must be set by .ci/bin scripts (non-fatal scan runs, fail here instead).
      - name: ‚ùå Fail if Gitleaks found secrets
        if: ${{ env.GITLEAKS_STATUS != '' && env.GITLEAKS_STATUS != '0' }}
        run: |
          echo "üö® Secrets detected by Gitleaks ‚Äî failing pipeline."
          exit 1

      - name: ‚ùå Fail if pip-audit found vulnerabilities
        if: ${{ env.AUDIT_STATUS != '' && env.AUDIT_STATUS != '0' }}
        run: |
          echo "üö® Vulnerabilities detected by pip-audit ‚Äî failing pipeline."
          exit 1

  sarif-upload:
    name: Upload SARIF to Security tab
    needs: [security]
    runs-on: ubuntu-latest
    if: ${{ needs.security.result != 'cancelled' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)) }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - file: trivy.sarif
            category: sec-trivy
          - file: gitleaks.sarif
            category: secrets-gitleaks
          - file: pip-audit.sarif
            category: deps-pip-audit
          - file: shellcheck.sarif
            category: lint-shellcheck
          - file: bandit.sarif
            category: code-bandit
    env:
      SARIF_DIR: "sarif-reports"

    steps:
      - name: üì• Download SARIF bundle
        uses: actions/download-artifact@v4
        with:
          name: sarif-bundle
          path: ${{ env.SARIF_DIR }}

      # Upload only if the specific SARIF exists (avoids errors if a tool skipped or produced nothing)
      - name: ‚¨ÜÔ∏è Upload ${{ matrix.category }} SARIF
        if: ${{ always() && hashFiles(format('{0}/{1}', env.SARIF_DIR, matrix.file)) != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_DIR }}/${{ matrix.file }}
          category: ${{ matrix.category }}
          wait-for-processing: true
