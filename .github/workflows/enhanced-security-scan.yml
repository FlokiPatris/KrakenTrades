# File: .github/workflows/appsec-security.yml
# 🔐 AppSec — Security & Secrets Scan
# Modular, DRY, CI-friendly workflow for secret detection and code security scanning

name: "🔐 AppSec — Security & Secrets Scan"

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

# Prevents duplicate runs on the same ref
concurrency:
  group: appsec-scan-${{ github.ref }}
  cancel-in-progress: true

# -------------------------
# 🌍 Global environment vars
# -------------------------
env:
  PYTHON_VERSION: "3.11"
  SARIF_DIR: "sarif-reports"

  # 📌 Pinned tool versions for reproducibility
  PIP_AUDIT_VERSION: "2.9.0"
  BANDIT_VERSION: "1.8.6"
  GITLEAKS_IMAGE: "zricethezav/gitleaks"
  GITLEAKS_IMAGE_TAG: "8.18.2"
  GITLEAKS_FALLBACK_TAG: "latest"

  # Only upload SARIF for trusted contexts (push or PR from same repo)
  UPLOAD_SARIF: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}

  # Optional: comma-separated list of required secret names for validation
  REQUIRED_SECRETS: ""

jobs:
  security:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        shell: bash

    steps:
      # -------------------------
      # 🛠️ Setup
      # -------------------------
      - name: 📥 Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1   # shallow clone for faster runs

      - name: 🐍 Setup Python runtime
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🔎 Validate required secrets
        run: bash .ci/bin/common.sh validate_required_secrets

      # -------------------------
      # 🔍 Trivy — FS scan → SARIF
      # -------------------------
      - name: 🔍 Trivy (filesystem)
        env:
          SARIF_DIR: ${{ env.SARIF_DIR }}
          TRIVY_VERSION: "0.51.4"
          TRIVY_SEVERITY: "HIGH,CRITICAL"
          TRIVY_TARGET: "."
          TRIVY_EXIT_ON_FINDINGS: "true"
        run: bash .ci/bin/run_trivy.sh

      - name: ⬆️ Upload Trivy SARIF
        if: always() && env.UPLOAD_SARIF == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_DIR }}/trivy.sarif
          category: sec-trivy
          wait-for-processing: true

      # -------------------------
      # 🔑 Gitleaks — Secret Scanning
      # -------------------------
      - name: 🔑 Gitleaks (secrets → SARIF)
        env:
          SARIF_DIR: ${{ env.SARIF_DIR }}
          GITLEAKS_IMAGE: ${{ env.GITLEAKS_IMAGE }}
          GITLEAKS_IMAGE_TAG: ${{ env.GITLEAKS_IMAGE_TAG }}
          GITLEAKS_FALLBACK_TAG: ${{ env.GITLEAKS_FALLBACK_TAG }}
        run: bash .ci/bin/run_gitleaks.sh

      - name: ⬆️ Upload Gitleaks SARIF
        if: always() && env.UPLOAD_SARIF == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_DIR }}/gitleaks.sarif
          category: secrets-gitleaks
          wait-for-processing: true

      - name: ❌ Fail build if Gitleaks found secrets
        if: ${{ env.GITLEAKS_STATUS != '' && env.GITLEAKS_STATUS != '0' }}
        run: |
          echo "🚨 Secrets detected by Gitleaks — failing pipeline."
          exit 1

      # -------------------------
      # 📦 pip-audit — Dependency Security
      # -------------------------
      - name: 📦 pip-audit (deps → SARIF)
        env:
          SARIF_DIR: ${{ env.SARIF_DIR }}
          PIP_AUDIT_VERSION: ${{ env.PIP_AUDIT_VERSION }}
        run: bash .ci/bin/run_pip_audit.sh

      - name: ⬆️ Upload pip-audit SARIF
        if: always() && env.UPLOAD_SARIF == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_DIR }}/pip-audit.sarif
          category: deps-pip-audit
          wait-for-processing: true

      # Fail pipeline if pip-audit detected vulnerabilities
      - name: ❌ Fail build if pip-audit found vulnerabilities
        if: ${{ env.AUDIT_STATUS != '0' }}
        run: |
          echo "🚨 Vulnerabilities detected by pip-audit — failing pipeline."
          exit 1

      # -------------------------
      # 🐍 Bandit — Static Code Analysis
      # -------------------------
      - name: 🐍 Bandit (code security → SARIF)
        env:
          SARIF_DIR: ${{ env.SARIF_DIR }}
          BANDIT_VERSION: ${{ env.BANDIT_VERSION }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: bash .ci/bin/run_bandit.sh

      - name: ⬆️ Upload Bandit SARIF
        if: always() && env.UPLOAD_SARIF == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_DIR }}/bandit.sarif
          category: code-bandit
          wait-for-processing: true

      # -------------------------
      # 🧹 Post-Scan Hardening & Audit Notes
      # -------------------------
      - name: 🧹 Harden artifacts & audit log
        if: always()
        run: |
          # Lock down SARIF files and directories
          find "${SARIF_DIR}" -type f -exec chmod 600 {} \; 2>/dev/null || true
          find "${SARIF_DIR}" -type d -exec chmod 700 {} \; 2>/dev/null || true

          # Append audit trail for CI compliance
          echo "Audit: docker scans used non-root, read-only FS, cap-drop=ALL, network none."
          echo "Audit: no secrets echoed; SARIF files mode 600; uploads gated by UPLOAD_SARIF=${UPLOAD_SARIF}."
