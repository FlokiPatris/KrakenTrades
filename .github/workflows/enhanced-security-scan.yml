name: "🛡️ Security & Secrets Scan"

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

concurrency:
  group: security-secrets-scan-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  SARIF_DIR: "sarif-reports"
  BANDIT_SEVERITY: "medium"
  GITLEAKS_IMAGE: "zricethezav/gitleaks"
  GITLEAKS_IMAGE_TAG: "8.18.2"
  GITLEAKS_FALLBACK_TAG: "latest"

jobs:
  security:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4

      - run: install -d -m 750 "${SARIF_DIR}"

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - id: deps
        run: |
          python -m pip install --upgrade pip
          if [[ -f poetry.lock ]]; then
            pip install "poetry==1.8.3"
            poetry export -f requirements.txt --output requirements.txt --without-hashes
            echo "requirements=requirements.txt" >> "$GITHUB_OUTPUT"
          elif [[ -f requirements.txt ]]; then
            echo "requirements=requirements.txt" >> "$GITHUB_OUTPUT"
          else
            echo "requirements=" >> "$GITHUB_OUTPUT"
          fi

      - run: |
          pip install "black==24.8.0" "flake8==7.1.0"
          black --check .
          flake8 .

      - name: 🔐 Gitleaks scan
        continue-on-error: true
        run: |
          write_empty() {
            cat > "$1" <<JSON
          {"version":"2.1.0","runs":[{"tool":{"driver":{"name":"$2","version":"$3"}},"results":[]}]}
          JSON
          }
          tag="${GITLEAKS_IMAGE_TAG}"
          docker pull "${GITLEAKS_IMAGE}:${tag}" >/dev/null 2>&1 || {
            echo "::warning::Falling back to ${GITLEAKS_FALLBACK_TAG}"
            tag="${GITLEAKS_FALLBACK_TAG}"
            docker pull "${GITLEAKS_IMAGE}:${tag}" >/dev/null 2>&1 || {
              write_empty "${SARIF_DIR}/gitleaks.sarif" "gitleaks" "$tag"
              exit 0
            }
          }
          uid_gid="$(id -u):$(id -g)"
          docker run --rm --user "$uid_gid" --read-only --cap-drop=ALL --network none \
            -v "$PWD:/repo:ro" -v "$PWD/${SARIF_DIR}:/out:rw" -w /repo \
            "${GITLEAKS_IMAGE}:${tag}" detect --no-banner --redact \
            --source /repo --report-format sarif --report-path "/out/gitleaks.sarif" || \
            write_empty "${SARIF_DIR}/gitleaks.sarif" "gitleaks" "$tag"
          [[ -s "${SARIF_DIR}/gitleaks.sarif" ]] || write_empty "${SARIF_DIR}/gitleaks.sarif" "gitleaks" "$tag"

      - uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ env.SARIF_DIR }}/gitleaks.sarif

      - name: 🧪 pip-audit
        continue-on-error: true
        run: |
          write_empty() {
            cat > "$1" <<JSON
          {"version":"2.1.0","runs":[{"tool":{"driver":{"name":"pip-audit","version":"2.9.0"}},"results":[]}]}
          JSON
          }
          pip install "pip-audit==2.9.0"
          req="${{ steps.deps.outputs.requirements }}"
          if [[ -n "$req" ]]; then
            pip-audit --requirement "$req" --format sarif --output "${SARIF_DIR}/pip-audit.sarif" --strict || true
          else
            pip-audit --format sarif --output "${SARIF_DIR}/pip-audit.sarif" --strict || true
          fi
          [[ -s "${SARIF_DIR}/pip-audit.sarif" ]] || write_empty "${SARIF_DIR}/pip-audit.sarif"

      - uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ env.SARIF_DIR }}/pip-audit.sarif

      - name: 🧠 Bandit
        continue-on-error: true
        run: |
          write_empty() {
            cat > "$1" <<JSON
          {"version":"2.1.0","runs":[{"tool":{"driver":{"name":"bandit","version":"1.8.6"}},"results":[]}]}
          JSON
          }
          pip install "bandit[toml]==1.8.6"
          bandit -r . -q --severity-level "${BANDIT_SEVERITY}" -f sarif -o "${SARIF_DIR}/bandit.sarif" || true
          [[ -s "${SARIF_DIR}/bandit.sarif" ]] || write_empty "${SARIF_DIR}/bandit.sarif"

      - uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ env.SARIF_DIR }}/bandit.sarif
