name: "AppSec — Security and secrets scan"

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  security-events: write

concurrency:
  group: security-secrets-scan-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  SARIF_DIR: "sarif-reports"
  BLACK_VERSION: "24.8.0"
  FLAKE8_VERSION: "7.1.0"
  PIP_AUDIT_VERSION: "2.9.0"
  BANDIT_VERSION: "1.8.6"
  GITLEAKS_IMAGE: "zricethezav/gitleaks"
  GITLEAKS_IMAGE_TAG: "8.18.2"
  GITLEAKS_FALLBACK_TAG: "latest"
  UPLOAD_SARIF: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}

jobs:
  security:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        shell: bash

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 📂 Prepare SARIF output dir and helpers
        run: |
          set -euo pipefail
          install -d -m 750 "${SARIF_DIR}"
          install -d -m 750 .ci/bin
          cat > .ci/bin/sarif_utils.sh <<'BASH'
          set -euo pipefail
          write_empty_sarif() {
            local file="$1" tool="$2" ver="$3"
            printf '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"%s","version":"%s"}},"results":[]}]} \n' "$tool" "$ver" > "$file"
          }
          safe_cat() {
            local file="$1"
            if [[ -f "$file" ]]; then
              echo "--- $(basename "$file") ---"
              # Avoid leaking TTY control characters
              sed -e $'s/\r//'
            else
              echo "::notice::No file at $file"
            fi
          }
          BASH
          chmod 750 .ci/bin/sarif_utils.sh

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - id: deps
        name: 📦 Resolve dependencies
        run: |
          set -euo pipefail
          source .ci/bin/sarif_utils.sh
          python -m pip install --upgrade pip
          if [[ -f poetry.lock ]]; then
            pip install "poetry==1.8.3"
            poetry export -f requirements.txt --output requirements.txt --without-hashes
            echo "requirements=requirements.txt" >> "$GITHUB_OUTPUT"
          elif [[ -f requirements.txt ]]; then
            echo "requirements=requirements.txt" >> "$GITHUB_OUTPUT"
          else
            echo "requirements=" >> "$GITHUB_OUTPUT"
          fi

      - name: 🧹 Lint & format check
        run: |
          set -euo pipefail
          pip install \
            "black==${BLACK_VERSION}" \
            "flake8==${FLAKE8_VERSION}"
          black --check .
          flake8 .

      - name: 🔐 Gitleaks scan
        continue-on-error: true
        run: |
          set -euo pipefail
          source .ci/bin/sarif_utils.sh

          tag="${GITLEAKS_IMAGE_TAG}"
          docker pull "${GITLEAKS_IMAGE}:${tag}" >/dev/null 2>&1 || {
            echo "::warning::Falling back to ${GITLEAKS_FALLBACK_TAG}"
            tag="${GITLEAKS_FALLBACK_TAG}"
            docker pull "${GITLEAKS_IMAGE}:${tag}" >/dev/null 2>&1 || {
              write_empty_sarif "${SARIF_DIR}/gitleaks.sarif" "gitleaks" "$tag"
              exit 0
            }
          }

          docker run --rm \
            --user "$(id -u):$(id -g)" \
            --read-only \
            --cap-drop=ALL \
            --network none \
            -v "$PWD:/repo:ro" \
            -v "$PWD/${SARIF_DIR}:/out:rw" \
            -w /repo \
            "${GITLEAKS_IMAGE}:${tag}" detect --no-banner \
            --source /repo \
            --report-format sarif \
            --report-path "/out/gitleaks.sarif" || true

          [[ -f "${SARIF_DIR}/gitleaks.sarif" ]] || \
            write_empty_sarif "${SARIF_DIR}/gitleaks.sarif" "gitleaks" "$tag"

          echo "--- Gitleaks SARIF ---"
          cat "${SARIF_DIR}/gitleaks.sarif"

      - uses: github/codeql-action/upload-sarif@v3
        if: ${{ env.UPLOAD_SARIF == 'true' }}
        with:
          sarif_file: ${{ env.SARIF_DIR }}/gitleaks.sarif

      - name: 🧪 pip-audit
        continue-on-error: true
        run: |
          set -euo pipefail
          source .ci/bin/sarif_utils.sh

          pip install "pip-audit==${PIP_AUDIT_VERSION}"

          req="${{ steps.deps.outputs.requirements }}"
          if [[ -n "${req}" ]]; then
            pip-audit --requirement "${req}" --format sarif --output "${SARIF_DIR}/pip-audit.sarif" --strict || true
          else
            pip-audit --format sarif --output "${SARIF_DIR}/pip-audit.sarif" --strict || true
          fi

          [[ -f "${SARIF_DIR}/pip-audit.sarif" ]] || \
            write_empty_sarif "${SARIF_DIR}/pip-audit.sarif" "pip-audit" "${PIP_AUDIT_VERSION}"

          echo "--- pip-audit SARIF ---"
          cat "${SARIF_DIR}/pip-audit.sarif"

      - uses: github/codeql-action/upload-sarif@v3
        if: ${{ env.UPLOAD_SARIF == 'true' }}
        with:
          sarif_file: ${{ env.SARIF_DIR }}/pip-audit.sarif

      - name: 🧠 Bandit security linter (JSON → SARIF)
        continue-on-error: true
        run: |
          set -euo pipefail
          source .ci/bin/sarif_utils.sh

          pip install "bandit[toml]==${BANDIT_VERSION}"

          # Run Bandit to JSON (more broadly supported than SARIF in Bandit itself)
          bandit -r . -q --severity-level "medium" -f json -o "${SARIF_DIR}/bandit.json" || true
          [[ -f "${SARIF_DIR}/bandit.json" ]] || echo '{}' > "${SARIF_DIR}/bandit.json"

          # Minimal, correct SARIF v2.1.0 converter for Bandit JSON
          python << 'PY'
          import json, os, sys
          bandit_json_path = os.path.join(os.environ.get("SARIF_DIR","sarif-reports"), "bandit.json")
          sarif_out_path = os.path.join(os.environ.get("SARIF_DIR","sarif-reports"), "bandit.sarif")
          bandit_ver = os.environ.get("BANDIT_VERSION","unknown")

          try:
            with open(bandit_json_path, "r", encoding="utf-8") as f:
              data = json.load(f)
          except Exception:
            data = {}

          results_in = data.get("results", []) or []
          # Build rules map
          rules = {}
          for r in results_in:
            rule_id = r.get("test_id") or "BANDIT"
            if rule_id not in rules:
              rules[rule_id] = {
                "id": rule_id,
                "name": r.get("test_name") or rule_id,
                "shortDescription": {"text": r.get("test_name") or rule_id},
                "helpUri": r.get("more_info") or "",
                "defaultConfiguration": {"level": "warning"},
              }

          def sev_to_level(s):
            s = (s or "").lower()
            if s == "high":
              return "error"
            if s == "medium":
              return "warning"
            return "note"

          sarif_results = []
          for r in results_in:
            msg = r.get("issue_text") or "Bandit issue"
            rule_id = r.get("test_id") or "BANDIT"
            fname = r.get("filename") or ""
            line = r.get("line_number") or 1
            sev = r.get("issue_severity")
            sarif_results.append({
              "ruleId": rule_id,
              "level": sev_to_level(sev),
              "message": {"text": msg},
              "locations": [{
                "physicalLocation": {
                  "artifactLocation": {"uri": fname.replace("\\","/")},
                  "region": {"startLine": int(line)}
                }
              }],
              "properties": {
                "tags": ["bandit", r.get("test_name") or rule_id]
              }
            })

          sarif = {
            "version": "2.1.0",
            "runs": [{
              "tool": {
                "driver": {
                  "name": "bandit",
                  "version": bandit_ver,
                  "informationUri": "https://bandit.readthedocs.io/",
                  "rules": list(rules.values())
                }
              },
              "results": sarif_results
            }]
          }

          with open(sarif_out_path, "w", encoding="utf-8") as f:
            json.dump(sarif, f, indent=2)
          PY

          [[ -f "${SARIF_DIR}/bandit.sarif" ]] || \
            write_empty_sarif "${SARIF_DIR}/bandit.sarif" "bandit" "${BANDIT_VERSION}"

          echo "--- Bandit SARIF ---"
          cat "${SARIF_DIR}/bandit.sarif"

      - uses: github/codeql-action/upload-sarif@v3
        if: ${{ env.UPLOAD_SARIF == 'true' }}
        with:
          sarif_file: ${{ env.SARIF_DIR }}/bandit.sarif

      - name: 📦 Archive SARIF bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sarif-reports
          path: ${{ env.SARIF_DIR }}/**
          if-no-files-found: warn
          retention-days: 3
