# File: .github/workflows/appsec-security.yml
name: "AppSec — Security and secrets scan"

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

concurrency:
  group: security-secrets-scan-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  SARIF_DIR: "sarif-reports"
  PIP_AUDIT_VERSION: "2.9.0"
  BANDIT_VERSION: "1.8.6"
  GITLEAKS_IMAGE: "zricethezav/gitleaks"
  GITLEAKS_IMAGE_TAG: "8.18.2"
  GITLEAKS_FALLBACK_TAG: "latest"
  UPLOAD_SARIF: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}
  BASH_ENV: .ci/bash_env
  REQUIRED_SECRETS: ""  # optional comma-separated list; e.g. "MY_TOKEN,OTHER_SECRET"

jobs:
  security:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Initialize shell and helpers
        run: |
          install -d -m 750 .ci .ci/bin "${SARIF_DIR}"

          # Global strict shell via BASH_ENV (DRY)
          cat > "${BASH_ENV}" <<'BASHRC'
          set -Eeuo pipefail
          shopt -s lastpipe
          umask 077
          export LC_ALL=C.UTF-8
          export LANG=C.UTF-8
          export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
          trap 'code=$?; echo "::error file=${BASH_SOURCE:-workflow},line=${LINENO},title=Bash error::exit ${code}"; exit ${code}' ERR
          BASHRC

          # SARIF utilities
          cat > .ci/bin/sarif_utils.sh <<'BASH'
          set -Eeuo pipefail
          write_empty_sarif() {
            # Args: <file> <tool> <version>
            printf '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"%s","version":"%s"}},"results":[]}]} \n' "$2" "$3" > "$1"
            chmod 600 "$1"
          }
          harden_artifact() { chmod 600 "$1" 2>/dev/null || true; }
          BASH
          chmod 750 .ci/bin/sarif_utils.sh

          # Bandit JSON -> SARIF converter (avoids stdout pipe BrokenPipeError)
          cat > .ci/bin/bandit_to_sarif.py <<'PY'
          import json, os, sys
          json_path = os.environ.get("BANDIT_JSON_PATH", "")
          out_dir = os.environ.get("SARIF_DIR", "sarif-reports")
          out_file = os.path.join(os.getcwd(), out_dir, "bandit.sarif")
          bandit_ver = os.environ.get("BANDIT_VERSION", "unknown")
          try:
              with open(json_path, "r", encoding="utf-8") as fh:
                  data = json.load(fh)
          except Exception:
              data = {}
          results = data.get("results") or []
          rules = {}
          for r in results:
              tid = r.get("test_id") or "BANDIT"
              if tid not in rules:
                  rules[tid] = {
                      "id": tid,
                      "name": r.get("test_name") or tid,
                      "shortDescription": {"text": r.get("test_name") or tid},
                      "helpUri": r.get("more_info") or "",
                      "defaultConfiguration": {"level": "warning"},
                  }
          def lvl(s): return {"high":"error","medium":"warning"}.get((s or "").lower(),"note")
          sarif_res = [{
              "ruleId": (r.get("test_id") or "BANDIT"),
              "level": lvl(r.get("issue_severity")),
              "message": {"text": r.get("issue_text") or "Bandit issue"},
              "locations": [{
                  "physicalLocation": {
                      "artifactLocation": {"uri": (r.get("filename") or "").replace("\\","/")},
                      "region": {"startLine": int(r.get("line_number") or 1)}
                  }
              }],
              "properties": {"tags": ["bandit", r.get("test_name") or ""]}
          } for r in results]
          out = {
              "version": "2.1.0",
              "runs": [{
                  "tool": {"driver": {
                      "name": "bandit",
                      "version": bandit_ver,
                      "informationUri": "https://bandit.readthedocs.io/",
                      "rules": list(rules.values())
                  }},
                  "results": sarif_res
              }]
          }
          os.makedirs(out_dir, exist_ok=True)
          with open(out_file, "w", encoding="utf-8") as fh:
              json.dump(out, fh, indent=2)
          PY
          chmod 750 .ci/bin/bandit_to_sarif.py

      - name: Validate required secrets
        run: |
          if [[ -n "${REQUIRED_SECRETS}" ]]; then
            IFS=',' read -r -a keys <<< "${REQUIRED_SECRETS}"
            missing=()
            for raw in "${keys[@]}"; do
              key="${raw//[[:space:]]/}"
              [[ -z "${key}" ]] && continue
              [[ -z "${!key-}" ]] && missing+=("${key}")
            done
            if (( ${#missing[@]} > 0 )); then
              echo "::error title=Missing required secrets::${missing[*]}"
              exit 1
            fi
          fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: |
            **/requirements*.txt
            **/pyproject.toml
            **/setup.cfg

      - id: deps
        name: Resolve Python dependencies for pip-audit
        run: |
          python -m pip install --upgrade pip
          if [[ -f poetry.lock ]]; then
            pip install "poetry==1.8.3"
            poetry export -f requirements.txt --output requirements.txt --without-hashes
            echo "requirements=requirements.txt" >> "$GITHUB_OUTPUT"
          elif [[ -f requirements.txt ]]; then
            echo "requirements=requirements.txt" >> "$GITHUB_OUTPUT"
          else
            echo "requirements=" >> "$GITHUB_OUTPUT"
          fi

      - name: "Gitleaks (secrets scan → SARIF)"
        continue-on-error: true
        run: |
          source .ci/bin/sarif_utils.sh

          tag="${GITLEAKS_IMAGE_TAG}"
          docker pull "${GITLEAKS_IMAGE}:${tag}" >/dev/null 2>&1 || {
            echo "::warning::Gitleaks fallback to ${GITLEAKS_FALLBACK_TAG}"
            tag="${GITLEAKS_FALLBACK_TAG}"
            docker pull "${GITLEAKS_IMAGE}:${tag}" >/dev/null 2>&1 || {
              write_empty_sarif "${SARIF_DIR}/gitleaks.sarif" "gitleaks" "$tag"
              exit 0
            }
          }

          docker run --rm \
            --user "$(id -u):$(id -g)" \
            --read-only \
            --cap-drop=ALL \
            --network none \
            -v "$PWD:/repo:ro" \
            -v "$PWD/${SARIF_DIR}:/out:rw" \
            -w /repo \
            "${GITLEAKS_IMAGE}:${tag}" detect --no-banner \
            --source /repo \
            --redact \
            --report-format sarif \
            --report-path "/out/gitleaks.sarif" || true

          [[ -s "${SARIF_DIR}/gitleaks.sarif" ]] || write_empty_sarif "${SARIF_DIR}/gitleaks.sarif" "gitleaks" "$tag"
          harden_artifact "${SARIF_DIR}/gitleaks.sarif"

      - uses: github/codeql-action/upload-sarif@v3
        if: ${{ env.UPLOAD_SARIF == 'true' }}
        with:
          sarif_file: ${{ env.SARIF_DIR }}/gitleaks.sarif
          category: secrets-gitleaks

      - name: "pip-audit (dependency vulns → SARIF)"
        continue-on-error: true
        run: |
          source .ci/bin/sarif_utils.sh
          pip install "pip-audit==${PIP_AUDIT_VERSION}"

          req="${{ steps.deps.outputs.requirements }}"
          if [[ -n "${req}" ]]; then
            pip-audit --requirement "${req}" --format sarif --output "${SARIF_DIR}/pip-audit.sarif" --strict || true
          else
            pip-audit --format sarif --output "${SARIF_DIR}/pip-audit.sarif" --strict || true
          fi

          [[ -s "${SARIF_DIR}/pip-audit.sarif" ]] || write_empty_sarif "${SARIF_DIR}/pip-audit.sarif" "pip-audit" "${PIP_AUDIT_VERSION}"
          harden_artifact "${SARIF_DIR}/pip-audit.sarif"

      - uses: github/codeql-action/upload-sarif@v3
        if: ${{ env.UPLOAD_SARIF == 'true' }}
        with:
          sarif_file: ${{ env.SARIF_DIR }}/pip-audit.sarif
          category: deps-pip-audit

      - name: "Bandit (code security → SARIF) — pipe-safe"
        continue-on-error: true
        run: |
          source .ci/bin/sarif_utils.sh
          pip install "bandit[toml]==${BANDIT_VERSION}"

          tmpdir="${RUNNER_TEMP:-/tmp}"
          BANDIT_JSON="$(mktemp -p "${tmpdir}" bandit-XXXX.json)"
          bandit -r . -q --severity-level "medium" -f json -o "${BANDIT_JSON}" || true

          export BANDIT_JSON_PATH="${BANDIT_JSON}"
          python .ci/bin/bandit_to_sarif.py
          harden_artifact "${SARIF_DIR}/bandit.sarif"

          # Minimal hygiene for intermediate file
          rm -f -- "${BANDIT_JSON}"

      - uses: github/codeql-action/upload-sarif@v3
        if: ${{ env.UPLOAD_SARIF == 'true' }}
        with:
          sarif_file: ${{ env.SARIF_DIR }}/bandit.sarif
          category: code-bandit

      - name: Harden artifacts and cleanup
        if: always()
        run: |
          chmod -R go= "${SARIF_DIR}" || true
          rm -rf ~/.cache/pip || true
          echo "Audit: docker scans used non-root, read-only FS, cap-drop=ALL, network none."
          echo "Audit: no secrets echoed; SARIF files mode 600; uploads gated by UPLOAD_SARIF=${UPLOAD_SARIF}."
