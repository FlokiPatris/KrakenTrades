name: "🛡️ Security & Secrets Scan"

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

# Minimal permissions for least privilege
permissions:
  contents: read
  security-events: write

env:
  # ---- Configurable constants (no magic values) ----
  PYTHON_VERSION: "3.11"
  SARIF_DIR: "sarif-reports"
  BANDIT_SEVERITY: "medium"   # low|medium|high - adjust to your tolerance
  GITLEAKS_VERSION: "v8.18.2" # pinned for reproducibility
  # If you keep a custom gitleaks.toml at repo root, it will be auto-used

jobs:
  security:
    name: Static analysis, dependencies, and secrets
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: 🧾 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔒 Validate environment and token
        shell: bash
        run: |
          set -euo pipefail
          required_vars=(PYTHON_VERSION SARIF_DIR BANDIT_SEVERITY GITLEAKS_VERSION)
          for key in "${required_vars[@]}"; do
            if [[ -z "${!key:-}" ]]; then
              echo "::error::$key is not set"; exit 1
            fi
          done
          # Ensure GitHub token is present for SARIF uploads (not echoed)
          if [[ -z "${GITHUB_TOKEN:-}" ]]; then
            echo "::warning::GITHUB_TOKEN not set explicitly; using default token from Actions."
          fi
          mkdir -p "$SARIF_DIR"
          chmod 700 "$SARIF_DIR"

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: 📦 Prepare dependency manifest (Poetry or requirements)
        id: deps
        shell: bash
        run: |
          set -euo pipefail
          if [[ -f poetry.lock ]]; then
            python -m pip install --upgrade pip
            pip install "poetry==1.8.3"
            poetry --version
            poetry export -f requirements.txt --output requirements.txt --without-hashes
            echo "requirements=requirements.txt" >> "$GITHUB_OUTPUT"
          elif [[ -f requirements.txt ]]; then
            echo "requirements=requirements.txt" >> "$GITHUB_OUTPUT"
          else
            echo "::warning::No poetry.lock or requirements.txt found; pip-audit will attempt environment resolution."
            echo "requirements=" >> "$GITHUB_OUTPUT"
          fi

      - name: 🧹 Lint (black, flake8)
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install black flake8
          black --check .
          flake8 .

      - name: 🔐 Gitleaks secrets scan (SARIF)
        # Official action avoids brittle curl URLs and handles release assets
        uses: gitleaks/gitleaks-action@v2
        with:
          version: ${{ env.GITLEAKS_VERSION }}
          args: >-
            detect
            --no-banner
            --redact
            --report-format sarif
            --report-path ${{ env.SARIF_DIR }}/gitleaks.sarif
            --source .
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📤 Upload Gitleaks SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_DIR }}/gitleaks.sarif

      - name: 🧪 Dependency CVE audit (pip-audit SARIF)
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install "pip-audit==2.7.3"
          if [[ -n "${{ steps.deps.outputs.requirements }}" ]]; then
            pip-audit --requirement "${{ steps.deps.outputs.requirements }}" \
              --format sarif --output "${SARIF_DIR}/pip-audit.sarif" --strict
          else
            pip-audit --format sarif --output "${SARIF_DIR}/pip-audit.sarif" --strict
          fi

      - name: 📤 Upload pip-audit SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_DIR }}/pip-audit.sarif

      - name: 🧠 Bandit static analysis (SARIF)
        shell: bash
        run: |
          set -euo pipefail
          pip install "bandit[toml]==1.7.10"
          # -q reduces noisy logs; we still fail via exit code
          bandit -r . -q -ll -s B101 \
            -f sarif -o "${SARIF_DIR}/bandit.sarif" \
            --severity-level "${BANDIT_SEVERITY}"

      - name: 📤 Upload Bandit SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_DIR }}/bandit.sarif

      - name: 🧽 Secure cleanup
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          # Remove any leftover archives or caches we created
          find . -maxdepth 2 -name "*.tar" -o -name "*.tar.gz" -o -name "*.zip" | xargs -r shred -u
          # Keep SARIF only for upload; runner is ephemeral, but we restrict perms
          chmod -R go-rwx "${SARIF_DIR}" || true
