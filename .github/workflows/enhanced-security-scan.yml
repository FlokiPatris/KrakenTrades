# File: .github/workflows/appsec-security.yml
name: "AppSec — Security and secrets scan"

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write  # required to upload SARIF

concurrency:
  group: security-secrets-scan-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  SARIF_DIR: "sarif-reports"
  PIP_AUDIT_VERSION: "2.9.0"
  BANDIT_VERSION: "1.8.6"
  GITLEAKS_IMAGE: "zricethezav/gitleaks"
  GITLEAKS_IMAGE_TAG: "8.18.2"
  GITLEAKS_FALLBACK_TAG: "latest"
  # Upload SARIF only for push and same-repo PRs (avoid untrusted fork uploads)
  UPLOAD_SARIF: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}

jobs:
  security:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Prepare SARIF dir and helpers
        run: |
          set -Eeuo pipefail
          install -d -m 750 "${SARIF_DIR}" .ci/bin
          cat > .ci/bin/sarif_utils.sh <<'BASH'
          set -Eeuo pipefail
          write_empty_sarif() {
            # file, tool, ver
            printf '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"%s","version":"%s"}},"results":[]}]} \n' "$2" "$3" > "$1"
            chmod 600 "$1"
          }
          BASH
          chmod 750 .ci/bin/sarif_utils.sh

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: |
            **/requirements*.txt
            **/pyproject.toml
            **/setup.cfg

      - id: deps
        name: Resolve Python dependencies for pip-audit
        run: |
          set -Eeuo pipefail
          python -m pip install --upgrade pip
          if [[ -f poetry.lock ]]; then
            pip install "poetry==1.8.3"
            poetry export -f requirements.txt --output requirements.txt --without-hashes
            echo "requirements=requirements.txt" >> "$GITHUB_OUTPUT"
          elif [[ -f requirements.txt ]]; then
            echo "requirements=requirements.txt" >> "$GITHUB_OUTPUT"
          else
            echo "requirements=" >> "$GITHUB_OUTPUT"
          fi

      - name: Gitleaks (secrets scan → SARIF)
        continue-on-error: true
        run: |
          set -Eeuo pipefail
          source .ci/bin/sarif_utils.sh

          tag="${GITLEAKS_IMAGE_TAG}"
          docker pull "${GITLEAKS_IMAGE}:${tag}" >/dev/null 2>&1 || {
            echo "::warning::Gitleaks fallback to ${GITLEAKS_FALLBACK_TAG}"
            tag="${GITLEAKS_FALLBACK_TAG}"
            docker pull "${GITLEAKS_IMAGE}:${tag}" >/dev/null 2>&1 || {
              write_empty_sarif "${SARIF_DIR}/gitleaks.sarif" "gitleaks" "$tag"
              exit 0
            }
          }

          docker run --rm \
            --user "$(id -u):$(id -g)" \
            --read-only \
            --cap-drop=ALL \
            --network none \
            -v "$PWD:/repo:ro" \
            -v "$PWD/${SARIF_DIR}:/out:rw" \
            -w /repo \
            "${GITLEAKS_IMAGE}:${tag}" detect --no-banner \
            --source /repo \
            --redact \
            --report-format sarif \
            --report-path "/out/gitleaks.sarif" || true

          [[ -s "${SARIF_DIR}/gitleaks.sarif" ]] || write_empty_sarif "${SARIF_DIR}/gitleaks.sarif" "gitleaks" "$tag"
          chmod 600 "${SARIF_DIR}/gitleaks.sarif"

      - uses: github/codeql-action/upload-sarif@v3
        if: ${{ env.UPLOAD_SARIF == 'true' }}
        with:
          sarif_file: ${{ env.SARIF_DIR }}/gitleaks.sarif
          category: secrets-gitleaks

      - name: pip-audit (dependency vulns → SARIF)
        continue-on-error: true
        run: |
          set -Eeuo pipefail
          source .ci/bin/sarif_utils.sh
          pip install "pip-audit==${PIP_AUDIT_VERSION}"

          req="${{ steps.deps.outputs.requirements }}"
          if [[ -n "${req}" ]]; then
            pip-audit --requirement "${req}" --format sarif --output "${SARIF_DIR}/pip-audit.sarif" --strict || true
          else
            # Fallback: scan the environment (may be sparse in CI)
            pip-audit --format sarif --output "${SARIF_DIR}/pip-audit.sarif" --strict || true
          fi

          [[ -s "${SARIF_DIR}/pip-audit.sarif" ]] || write_empty_sarif "${SARIF_DIR}/pip-audit.sarif" "pip-audit" "${PIP_AUDIT_VERSION}"
          chmod 600 "${SARIF_DIR}/pip-audit.sarif"

      - uses: github/codeql-action/upload-sarif@v3
        if: ${{ env.UPLOAD_SARIF == 'true' }}
        with:
          sarif_file: ${{ env.SARIF_DIR }}/pip-audit.sarif
          category: deps-pip-audit

      - name: Bandit (code security → SARIF)
        continue-on-error: true
        run: |
          set -Eeuo pipefail
          source .ci/bin/sarif_utils.sh
          pip install "bandit[toml]==${BANDIT_VERSION}"

          # Stream JSON to SARIF converter to avoid on-disk JSON
          bandit -r . -q --severity-level "medium" -f json | python - <<'PY' > "${SARIF_DIR}/bandit.sarif"
          import json, sys, os
          bandit_ver = os.environ.get("BANDIT_VERSION","unknown")
          try:
              data = json.load(sys.stdin)
          except Exception:
              data = {}
          results = data.get("results") or []
          rules = {}
          for r in results:
              rid = r.get("test_id") or "BANDIT"
              if rid not in rules:
                  rules[rid] = {
                      "id": rid,
                      "name": r.get("test_name") or rid,
                      "shortDescription": {"text": r.get("test_name") or rid},
                      "helpUri": r.get("more_info") or "",
                      "defaultConfiguration": {"level": "warning"},
                  }
          def lvl(s): return {"high":"error","medium":"warning"}.get((s or "").lower(),"note")
          sarif_res = [{
              "ruleId": r.get("test_id") or "BANDIT",
              "level": lvl(r.get("issue_severity")),
              "message": {"text": r.get("issue_text") or "Bandit issue"},
              "locations": [{
                  "physicalLocation": {
                      "artifactLocation": {"uri": (r.get("filename") or "").replace("\\","/")},
                      "region": {"startLine": int(r.get("line_number") or 1)}
                  }
              }],
              "properties": {"tags": ["bandit", r.get("test_name") or ""]}
          } for r in results]
          out = {
              "version": "2.1.0",
              "runs": [{
                  "tool": {"driver": {
                      "name": "bandit",
                      "version": bandit_ver,
                      "informationUri": "https://bandit.readthedocs.io/",
                      "rules": list(rules.values())
                  }},
                  "results": sarif_res
              }]
          }
          json.dump(out, sys.stdout, indent=2)
          PY

          [[ -s "${SARIF_DIR}/bandit.sarif" ]] || write_empty_sarif "${SARIF_DIR}/bandit.sarif" "bandit" "${BANDIT_VERSION}"
          chmod 600 "${SARIF_DIR}/bandit.sarif"

      - uses: github/codeql-action/upload-sarif@v3
        if: ${{ env.UPLOAD_SARIF == 'true' }}
        with:
          sarif_file: ${{ env.SARIF_DIR }}/bandit.sarif
          category: code-bandit
