# File: .github/workflows/security-bandit.yml
name: Security â€” Bandit (SARIF)

on:
  push:
    branches:
      - main
      - develop
      - 'release/*'
    paths:
      - '**/*.py'
      - 'pyproject.toml'
      - 'requirements*.txt'
      - 'setup.cfg'
      - 'bandit.yaml'
      - 'bandit.yml'
      - '.bandit'
      - '.github/workflows/security-bandit.yml'
  pull_request:
    paths:
      - '**/*.py'
      - 'pyproject.toml'
      - 'requirements*.txt'
      - 'setup.cfg'
      - 'bandit.yaml'
      - 'bandit.yml'
      - '.bandit'
      - '.github/workflows/security-bandit.yml'
  schedule:
    - cron: '0 3 * * 1' # Weekly security scan (Mon 03:00 UTC)
  workflow_dispatch:

# Prevent duplicate runs per ref; cancel in-progress for faster feedback.
concurrency:
  group: bandit-${{ github.ref }}
  cancel-in-progress: true

# Lock down default token permissions.
permissions:
  contents: read
  security-events: write

jobs:
  bandit:
    name: Bandit scan and upload to Code Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      # ---- Configurable constants (no magic values) ----
      PYTHON_VERSION: '3.11'
      BANDIT_VERSION: '1.7.9' # Ensure SARIF support; adjust as needed.
      BANDIT_TARGET: '.'      # Monorepo? Point to subdir here.
      BANDIT_EXCLUDES: '.git,.venv,venv,site-packages,build,dist,.tox,.mypy_cache,.pytest_cache,node_modules,__pycache__'
      REPORT_ROOT: '${{ github.workspace }}/.reports/security'
      SARIF_FILE: '${{ github.workspace }}/.reports/security/bandit.sarif'
      # Optional, if you maintain these in repo:
      BANDIT_CONFIG_FILE: 'bandit.yaml'
      BANDIT_BASELINE_FILE: 'bandit.baseline'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: |
            **/requirements*.txt
            **/pyproject.toml
            **/setup.cfg

      - name: Install Bandit (pinned)
        shell: bash
        run: |
          set -Eeuo pipefail
          python -m pip install --upgrade pip
          pip install "bandit==${BANDIT_VERSION}"

      - name: Prepare report directory with restricted permissions
        shell: bash
        run: |
          set -Eeuo pipefail
          install -d -m 700 "${REPORT_ROOT}"

      - name: Run Bandit (SARIF, quiet, excludes respected)
        shell: bash
        env:
          # Defensive default to avoid empty excludes interpreted oddly by Bandit
          _EXCLUDES: ${{ env.BANDIT_EXCLUDES }}
        run: |
          set -Eeuo pipefail

          # Build dynamic args safely; avoid injection by not expanding user-controlled inputs.
          args=()
          # Recurse target; if you scan subdir, set BANDIT_TARGET in env.
          args+=("-r" "${BANDIT_TARGET}")

          # SARIF output to restricted path
          args+=("-f" "sarif" "-o" "${SARIF_FILE}")

          # Quiet mode to avoid leaking details in logs
          args+=("-q")

          # Exclusions (comma-separated)
          if [[ -n "${_EXCLUDES}" ]]; then
            args+=("-x" "${_EXCLUDES}")
          fi

          # Optional config/baseline if present (do not fail if missing)
          if [[ -f "${BANDIT_CONFIG_FILE}" ]]; then
            args+=("-c" "${BANDIT_CONFIG_FILE}")
          fi
          if [[ -f "${BANDIT_BASELINE_FILE}" ]]; then
            args+=("-b" "${BANDIT_BASELINE_FILE}")
          fi

          echo "::group::Bandit execution"
          bandit "${args[@]}"
          echo "::endgroup::"

          # Ensure SARIF file exists and is non-empty
          if [[ ! -s "${SARIF_FILE}" ]]; then
            echo "Bandit did not produce SARIF (empty or missing) at ${SARIF_FILE}" >&2
            exit 2
          fi

          # Tighten permissions on the SARIF artifact before upload
          chmod 600 "${SARIF_FILE}"

      - name: Upload SARIF to GitHub Code Scanning
        if: always() # Upload even if Bandit reports issues; findings appear in Security > Code scanning alerts
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_FILE }}
          category: python-bandit

      - name: Secure cleanup of local SARIF
        if: always()
        shell: bash
        run: |
          set -Eeuo pipefail
          # Remove report from runner workspace; Code Scanning has the copy already.
          rm -f "${SARIF_FILE}"
          # Keep the directory for potential future scanners; it's empty and permissioned 700.
