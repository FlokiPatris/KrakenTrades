# File: .github/workflows/appsec-security.yml
# üß† 14.8 ‚Äî Clean, CI/CD-friendly, attacker-minded. Lean, documented, and secure-by-default.

name: "üîê AppSec ‚Äî Security & Secrets Scan"

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write  # üõ°Ô∏è needed for SARIF uploads

concurrency:
  group: appsec-scan-${{ github.ref }}
  cancel-in-progress: true

env:
  # üîß Centralized configuration (no magic constants)
  PYTHON_VERSION: "3.11"
  SARIF_DIR: "sarif-reports"

  # üì¶ Tool versions (pin for reproducibility)
  PIP_AUDIT_VERSION: "2.9.0"
  BANDIT_VERSION: "1.8.6"
  GITLEAKS_IMAGE: "zricethezav/gitleaks"
  GITLEAKS_IMAGE_TAG: "8.18.2"
  GITLEAKS_FALLBACK_TAG: "latest"

  # üîÑ Upload SARIF for trusted contexts (avoid exfil in forks)
  UPLOAD_SARIF: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}

  # üß∞ Shell profile for strict mode; CI helpers live in .ci
  BASH_ENV: .ci/bash_env

  # üîê Optional: comma-separated required secrets; fail early if missing (e.g. "SNYK_TOKEN,MY_PAT")
  REQUIRED_SECRETS: ""

jobs:
  security:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        shell: bash

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # ‚è© faster, less surface

      - name: ‚öôÔ∏è Init shell + helpers
        run: |
          mkdir -p .ci/bin "${SARIF_DIR}"

          # üß± Strict, predictable shell
          cat > "${BASH_ENV}" <<'BASHRC'
          set -Eeuo pipefail
          shopt -s lastpipe
          umask 077
          export LC_ALL=C.UTF-8
          export LANG=C.UTF-8
          trap 'c=$?; echo "::error title=Bash error,file=${BASH_SOURCE:-workflow},line=${LINENO}::exit ${c}"; exit ${c}' ERR
          BASHRC

          # üìÑ SARIF helpers
          cat > .ci/bin/sarif_utils.sh <<'BASH'
          set -Eeuo pipefail
          write_empty_sarif() { # <file> <tool> <version>
            printf '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"%s","version":"%s"}},"results":[]}]} \n' "$2" "$3" > "$1"
            chmod 600 "$1" 2>/dev/null || true
          }
          harden_artifact() { chmod 600 "$1" 2>/dev/null || true; }
          BASH
          chmod 750 .ci/bin/sarif_utils.sh

          # üêç Bandit JSON ‚ûú SARIF (with path normalization for GitHub matching)
          cat > .ci/bin/bandit_to_sarif.py <<'PY'
          from __future__ import annotations
          import json, os
          from typing import Any, Dict, List

          JSON_ENV = "BANDIT_JSON_PATH"
          OUT_DIR_ENV = "SARIF_DIR"
          VER_ENV = "BANDIT_VERSION"
          WORKSPACE_ENV = "GITHUB_WORKSPACE"

          json_path = os.environ.get(JSON_ENV, "")
          out_dir = os.environ.get(OUT_DIR_ENV, "sarif-reports")
          out_file = os.path.join(os.getcwd(), out_dir, "bandit.sarif")
          bandit_ver = os.environ.get(VER_ENV, "unknown")
          repo_root = os.environ.get(WORKSPACE_ENV, os.getcwd()).replace("\\", "/")

          def norm_repo_rel(p: str) -> str:
            # Normalize to repo-relative URI (GitHub Code Scanning requirement)
            p = (p or "").replace("\\", "/")
            while p.startswith("./"):
              p = p[2:]
            if os.path.isabs(p):
              try:
                rel = os.path.relpath(p, repo_root).replace("\\", "/")
                return rel
              except Exception:
                return os.path.basename(p)
            # Strip leading repo root if it's embedded
            if p.startswith(repo_root.rstrip("/") + "/"):
              return p[len(repo_root.rstrip("/")) + 1 :]
            return p

          try:
            with open(json_path, "r", encoding="utf-8") as fh:
              data: Dict[str, Any] = json.load(fh)
          except Exception:
            data = {}

          results: List[Dict[str, Any]] = data.get("results") or []
          rules: Dict[str, Dict[str, Any]] = {}
          for r in results:
            tid = (r.get("test_id") or "BANDIT").strip()
            name = r.get("test_name") or tid
            if tid not in rules:
              rules[tid] = {
                "id": tid,
                "name": name,
                "shortDescription": {"text": name},
                "helpUri": r.get("more_info") or "",
                "defaultConfiguration": {"level": "warning"},
              }

          def sev_level(s: str | None) -> str:
            m = (s or "").lower()
            if m == "high": return "error"
            if m == "medium": return "warning"
            return "note"

          sarif_results: List[Dict[str, Any]] = []
          for r in results:
            uri = norm_repo_rel(r.get("filename") or "")
            start_line = r.get("line_number") or 1
            sarif_results.append({
              "ruleId": (r.get("test_id") or "BANDIT"),
              "level": sev_level(r.get("issue_severity")),
              "message": {"text": r.get("issue_text") or "Bandit issue"},
              "locations": [{
                "physicalLocation": {
                  "artifactLocation": {"uri": uri},
                  "region": {"startLine": max(1, int(start_line))}
                }
              }],
              "properties": {
                "tags": ["bandit", (r.get("test_name") or "").strip()],
                "severity": (r.get("issue_severity") or "").upper(),
                "confidence": (r.get("issue_confidence") or "").upper(),
                "cwe": (r.get("issue_cwe") or {}).get("id")
              }
            })

          out = {
            "version": "2.1.0",
            "runs": [{
              "tool": {"driver": {
                "name": "bandit",
                "version": bandit_ver,
                "informationUri": "https://bandit.readthedocs.io/",
                "rules": list(rules.values()),
              }},
              "results": sarif_results
            }]
          }

          os.makedirs(out_dir, exist_ok=True)
          with open(out_file, "w", encoding="utf-8") as fh:
            json.dump(out, fh, indent=2)
          PY
          chmod 750 .ci/bin/bandit_to_sarif.py

      - name: üîê Validate required secrets
        run: |
          if [[ -n "${REQUIRED_SECRETS}" ]]; then
            IFS=',' read -r -a _keys <<< "${REQUIRED_SECRETS}"
            missing=()
            for raw in "${_keys[@]}"; do
              key="${raw//[[:space:]]/}"
              [[ -z "${key}" ]] && continue
              [[ -z "${!key-}" ]] && missing+=("${key}")
            done
            if (( ${#missing[@]} > 0 )); then
              echo "::error title=Missing required secrets::${missing[*]}"
              exit 1
            fi
          fi

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - id: deps
        name: üì¶ Resolve Python dependencies (for pip-audit)
        run: |
          python -m pip install --upgrade pip
          if [[ -f poetry.lock ]]; then
            pip install "poetry==1.8.3"
            poetry export -f requirements.txt --output requirements.txt --without-hashes
            echo "requirements=requirements.txt" >> "$GITHUB_OUTPUT"
          elif [[ -f requirements.txt ]]; then
            echo "requirements=requirements.txt" >> "$GITHUB_OUTPUT"
          else
            echo "requirements=" >> "$GITHUB_OUTPUT"
          fi

      - name: üîë Gitleaks (secrets ‚Üí SARIF)
        run: |
          source .ci/bin/sarif_utils.sh

          tag="${GITLEAKS_IMAGE_TAG}"
          if ! docker pull "${GITLEAKS_IMAGE}:${tag}" >/dev/null 2>&1; then
            echo "::warning::Gitleaks fallback to ${GITLEAKS_FALLBACK_TAG}"
            tag="${GITLEAKS_FALLBACK_TAG}"
            if ! docker pull "${GITLEAKS_IMAGE}:${tag}" >/dev/null 2>&1; then
              write_empty_sarif "${SARIF_DIR}/gitleaks.sarif" "gitleaks" "$tag"
              exit 0
            fi
          fi

          # Fail with exit code 1 if secrets are found
          docker run --rm \
            --user "$(id -u):$(id -g)" \
            --read-only \
            --cap-drop=ALL \
            --network none \
            -v "$PWD:/repo:ro" \
            -v "$PWD/${SARIF_DIR}:/out:rw" \
            -w /repo \
            "${GITLEAKS_IMAGE}:${tag}" detect --no-banner \
              --source /repo \
              --redact \
              --exit-code 1 \
              --report-format sarif \
              --report-path "/out/gitleaks.sarif"

          [[ -s "${SARIF_DIR}/gitleaks.sarif" ]] || \
            write_empty_sarif "${SARIF_DIR}/gitleaks.sarif" "gitleaks" "$tag"

          harden_artifact "${SARIF_DIR}/gitleaks.sarif"

      - name: ‚¨ÜÔ∏è Upload Gitleaks SARIF
        if: always() && env.UPLOAD_SARIF == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_DIR }}/gitleaks.sarif
          category: secrets-gitleaks
          wait-for-processing: true

      - name: üì¶ pip-audit (deps ‚Üí SARIF)
        run: |
          source .ci/bin/sarif_utils.sh
          pip install --disable-pip-version-check --no-cache-dir "pip-audit==${PIP_AUDIT_VERSION}"

          req="${{ steps.deps.outputs.requirements }}"
          audit_args=(--format sarif --output "${SARIF_DIR}/pip-audit.sarif" --strict)

          set +e
          if [[ -n "${req}" ]]; then
            pip-audit --requirement "${req}" "${audit_args[@]}"
          else
            pip-audit "${audit_args[@]}"
          fi
          audit_status=$?
          set -e

          [[ -s "${SARIF_DIR}/pip-audit.sarif" ]] || write_empty_sarif "${SARIF_DIR}/pip-audit.sarif" "pip-audit" "${PIP_AUDIT_VERSION}"

          # Save the exit code for later steps
          echo "AUDIT_STATUS=$audit_status" >> $GITHUB_ENV

      - name: ‚¨ÜÔ∏è Upload pip-audit SARIF
        if: ${{ env.UPLOAD_SARIF == 'true' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_DIR }}/pip-audit.sarif
          category: deps-pip-audit
          wait-for-processing: true

      - name: ‚ùå Fail build if vulnerabilities found
        if: ${{ env.UPLOAD_SARIF == 'true' && env.AUDIT_STATUS != '0' }}
        run: |
          echo "Vulnerabilities detected by pip-audit. Failing job."
          exit 1

      - name: üêç Bandit (code security ‚Üí SARIF)
        env:
          # Pass workspace for path normalization inside converter
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          source .ci/bin/sarif_utils.sh
          pip install --disable-pip-version-check --no-cache-dir "bandit[toml]==${BANDIT_VERSION}"

          tmpdir="${RUNNER_TEMP:-/tmp}"
          BANDIT_JSON="$(mktemp -p "${tmpdir}" bandit-XXXX.json)"

          # üîé Scan from repo root; include low severity while stabilizing pipeline
          bandit -r "${GITHUB_WORKSPACE:-.}" \
                 --severity-level low \
                 -f json \
                 -o "${BANDIT_JSON}" \
                 -q || true

          # üß≠ Quick visibility (don‚Äôt leak code): count + rule IDs only
          python - <<'PY'
          import json, os
          p = os.environ.get("BANDIT_JSON","")
          try:
              with open(p,"r",encoding="utf-8") as f:
                  d = json.load(f)
              res = d.get("results") or []
              print(f"::notice title=Bandit::results={len(res)}")
              for r in res[:5]:
                  print(f"::notice title=Bandit sample::{r.get('test_id')} {r.get('issue_severity')} {r.get('filename')}")
          except Exception as e:
              print(f"::warning title=Bandit JSON parse failed::{e}")
          PY

          export BANDIT_JSON_PATH="${BANDIT_JSON}"
          python .ci/bin/bandit_to_sarif.py
          harden_artifact "${SARIF_DIR}/bandit.sarif"

          rm -f -- "${BANDIT_JSON}"

      - name: ‚¨ÜÔ∏è Upload Bandit SARIF
        if: ${{ env.UPLOAD_SARIF == 'true' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_DIR }}/bandit.sarif
          category: code-bandit
          wait-for-processing: true

      - name: üßπ Harden artifacts & audit log
        if: always()
        run: |
          chmod -R go= "${SARIF_DIR}" 2>/dev/null || true
          echo "Audit: docker scans used non-root, read-only FS, cap-drop=ALL, network none."
          echo "Audit: no secrets echoed; SARIF files mode 600; uploads gated by UPLOAD_SARIF=${UPLOAD_SARIF}."
