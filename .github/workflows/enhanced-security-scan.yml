name: "üõ°Ô∏è Security & Secrets Scan"

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

# Least-privilege permissions
permissions:
  contents: read
  security-events: write

env:
  # Tunables (no magic constants)
  PYTHON_VERSION: "3.11"
  SARIF_DIR: "sarif-reports"
  BANDIT_SEVERITY: "medium"     # low|medium|high
  GITLEAKS_IMAGE_TAG: "8.18.2"  # pinned for reproducibility

jobs:
  security:
    name: Static analysis, dependencies, and secrets
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: üßæ Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîí Validate environment and prepare artifacts dir
        shell: bash
        run: |
          set -euo pipefail
          required_vars=(PYTHON_VERSION SARIF_DIR BANDIT_SEVERITY GITLEAKS_IMAGE_TAG)
          for key in "${required_vars[@]}"; do
            if [[ -z "${!key:-}" ]]; then
              echo "::error::$key is not set"; exit 1
            fi
          done
          mkdir -p "$SARIF_DIR"
          chmod 700 "$SARIF_DIR"

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: üì¶ Prepare dependency manifest (Poetry or requirements)
        id: deps
        shell: bash
        run: |
          set -euo pipefail
          if [[ -f poetry.lock ]]; then
            python -m pip install --upgrade pip
            pip install "poetry==1.8.3"
            poetry --version
            poetry export -f requirements.txt --output requirements.txt --without-hashes
            echo "requirements=requirements.txt" >> "$GITHUB_OUTPUT"
          elif [[ -f requirements.txt ]]; then
            echo "requirements=requirements.txt" >> "$GITHUB_OUTPUT"
          else
            echo "::warning::No poetry.lock or requirements.txt found; pip-audit will attempt environment resolution."
            echo "requirements=" >> "$GITHUB_OUTPUT"
          fi

      - name: üßπ Lint (black, flake8)
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install black flake8
          black --check .
          flake8 .

      - name: üîê Gitleaks secrets scan (Docker, SARIF)
        shell: bash
        run: |
          set -euo pipefail
          docker pull "zricethezav/gitleaks:${GITLEAKS_IMAGE_TAG}"
          # Conditionally use repo config if present
          CFG_ARGS=()
          if [[ -f .gitleaks.toml ]]; then
            CFG_ARGS+=(--config "/repo/.gitleaks.toml")
          fi
          docker run --rm \
            -v "$PWD:/repo:ro" \
            -w /repo \
            "zricethezav/gitleaks:${GITLEAKS_IMAGE_TAG}" detect \
              --no-banner \
              --redact \
              --source /repo \
              --report-format sarif \
              --report-path "/repo/${SARIF_DIR}/gitleaks.sarif" \
              "${CFG_ARGS[@]}"

      - name: üì§ Upload Gitleaks SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_DIR }}/gitleaks.sarif

      - name: üß™ Dependency CVE audit (pip-audit SARIF)
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install "pip-audit==2.9.0"
          if [[ -n "${{ steps.deps.outputs.requirements }}" ]]; then
            pip-audit --requirement "${{ steps.deps.outputs.requirements }}" \
              --format sarif --output "${SARIF_DIR}/pip-audit.sarif" --strict
          else
            pip-audit --format sarif --output "${SARIF_DIR}/pip-audit.sarif" --strict
          fi

      - name: üì§ Upload pip-audit SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_DIR }}/pip-audit.sarif

      - name: üß† Bandit static analysis (SARIF)
        shell: bash
        run: |
          set -euo pipefail
          pip install "bandit[toml]==1.8.6"
          bandit -r . -q \
            --severity-level "${BANDIT_SEVERITY}" \
            -f sarif -o "${SARIF_DIR}/bandit.sarif" || exit 1

      - name: üì§ Upload Bandit SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_DIR }}/bandit.sarif

      - name: üßΩ Secure cleanup
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          # Shred any archives if created by future steps; keep SARIF for upload
          find . -maxdepth 2 -type f \( -name "*.tar" -o -name "*.tar.gz" -o -name "*.zip" \) -print0 | xargs -0 -r rm -f
          chmod -R go-rwx "${SARIF_DIR}" || true
