name: "🛡️ Security & Secrets Scan"

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  security-events: write

concurrency:
  group: security-secrets-scan-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  SARIF_DIR: "sarif-reports"
  BLACK_VERSION: "24.8.0"
  FLAKE8_VERSION: "7.1.0"
  PIP_AUDIT_VERSION: "2.9.0"
  BANDIT_VERSION: "1.8.6"
  GITLEAKS_IMAGE: "zricethezav/gitleaks"
  GITLEAKS_IMAGE_TAG: "8.18.2"
  GITLEAKS_FALLBACK_TAG: "latest"
  # Limit SARIF uploads to push / same‑repo PR
  UPLOAD_SARIF: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}

jobs:
  security:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4

      - name: 📂 Prepare SARIF output dir
        run: |
          set -euo pipefail
          install -d -m 750 "${SARIF_DIR}"

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - id: deps
        name: 📦 Resolve Dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [[ -f poetry.lock ]]; then
            pip install "poetry==1.8.3"
            poetry export -f requirements.txt --output requirements.txt --without-hashes
            echo "requirements=requirements.txt" >> "$GITHUB_OUTPUT"
          elif [[ -f requirements.txt ]]; then
            echo "requirements=requirements.txt" >> "$GITHUB_OUTPUT"
          else
            echo "requirements=" >> "$GITHUB_OUTPUT"
          fi

      - name: 🧹 Lint & Format Check
        run: |
          set -euo pipefail
          pip install \
            "black==${BLACK_VERSION}" \
            "flake8==${FLAKE8_VERSION}"
          black --check .
          flake8 .

      - name: 🔐 Gitleaks Scan
        continue-on-error: true
        run: |
          set -euo pipefail
          write_empty_sarif() {
            local file="$1" tool="$2" ver="$3"
            printf '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"%s","version":"%s"}},"results":[]}]} \n' "$tool" "$ver" > "$file"
          }

          tag="${GITLEAKS_IMAGE_TAG}"
          docker pull "${GITLEAKS_IMAGE}:${tag}" >/dev/null 2>&1 || {
            echo "::warning::Falling back to ${GITLEAKS_FALLBACK_TAG}"
            tag="${GITLEAKS_FALLBACK_TAG}"
            docker pull "${GITLEAKS_IMAGE}:${tag}" >/dev/null 2>&1 || {
              write_empty_sarif "${SARIF_DIR}/gitleaks.sarif" "gitleaks" "$tag"
              exit 0
            }
          }

          docker run --rm \
            --user "$(id -u):$(id -g)" \
            --read-only \
            --cap-drop=ALL \
            --network none \
            -v "$PWD:/repo:ro" \
            -v "$PWD/${SARIF_DIR}:/out:rw" \
            -w /repo \
            "${GITLEAKS_IMAGE}:${tag}" detect --no-banner \
            --source /repo \
            --report-format sarif \
            --report-path "/out/gitleaks.sarif" || true

          [[ -f "${SARIF_DIR}/gitleaks.sarif" ]] || \
            write_empty_sarif "${SARIF_DIR}/gitleaks.sarif" "gitleaks" "$tag"

          echo "--- Gitleaks SARIF ---"
          cat "${SARIF_DIR}/gitleaks.sarif"

      - uses: github/codeql-action/upload-sarif@v3
        if: ${{ env.UPLOAD_SARIF == 'true' }}
        with:
          sarif_file: ${{ env.SARIF_DIR }}/gitleaks.sarif

      - name: 🧪 pip-audit
        continue-on-error: true
        run: |
          set -euo pipefail
          write_empty_sarif() {
            local file="$1" tool="$2" ver="$3"
            printf '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"%s","version":"%s"}},"results":[]}]} \n' "$tool" "$ver" > "$file"
          }

          pip install "pip-audit==${PIP_AUDIT_VERSION}"
          req="${{ steps.deps.outputs.requirements }}"
          if [[ -n "${req}" ]]; then
            pip-audit --requirement "${req}" --format sarif --output "${SARIF_DIR}/pip-audit.sarif" --strict || true
          else
            pip-audit --format sarif --output "${SARIF_DIR}/pip-audit.sarif" --strict || true
          fi

          [[ -f "${SARIF_DIR}/pip-audit.sarif" ]] || \
            write_empty_sarif "${SARIF_DIR}/pip-audit.sarif" "pip-audit" "${PIP_AUDIT_VERSION}"

          echo "--- pip-audit SARIF ---"
          cat "${SARIF_DIR}/pip-audit.sarif"

      - uses: github/codeql-action/upload-sarif@v3
        if: ${{ env.UPLOAD_SARIF == 'true' }}
        with:
          sarif_file: ${{ env.SARIF_DIR }}/pip-audit.sarif

      - name: 🧠 Bandit Security Linter
        continue-on-error: true
        run: |
          set -euo pipefail
          write_empty_sarif() {
            local file="$1" tool="$2" ver="$3"
            printf '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"%s","version":"%s"}},"results":[]}]} \n' "$tool" "$ver" > "$file"
          }

          pip install "bandit[toml]==${BANDIT_VERSION}"
          bandit -r . -q --severity-level "medium" \
            -f sarif -o "${SARIF_DIR}/bandit.sarif" || true

          [[ -f "${SARIF_DIR}/bandit.sarif" ]] || \
            write_empty_sarif "${SARIF_DIR}/bandit.sarif" "bandit" "${BANDIT_VERSION}"

          echo "--- Bandit SARIF ---"
          cat "${SARIF_DIR}/bandit.sarif"

      - uses: github/codeql-action/upload-sarif@v3
        if: ${{ env.UPLOAD_SARIF == 'true' }}
        with:
          sarif_file: ${{ env.SARIF_DIR }}/bandit.sarif

      - name: 📦 Archive SARIF bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sarif-reports
          path: ${{ env.SARIF_DIR }}/**
          if-no-files-found: warn
          retention-days: 3
